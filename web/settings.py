"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's=5t(39-)b9duor&)dg^t&9t(j!ks-e36e6b8=s4(5_z0y^0*0'

## N. califonia shujupai-staging. ssh -i /home/julia/.ssh/shujupai ec2-user@13.56.115.29
# SERVER_HOST = 'shujupai-staging.qibvns5w92.us-west-1.elasticbeanstalk.com'
# Tokyo shujupai-stage: ssh -i /home/julia/.ssh/shujupai-tok ec2-user@54.249.75.59
#SERVER_HOST = 'edatapai-stg.ikyqaehgpg.ap-northeast-1.elasticbeanstalk.com'
SERVER_HOST = 'edatapai-prd.xvr6mqzmnb.ap-northeast-1.elasticbeanstalk.com'
# SERVER_HOST = 'edatapai-stg.ikyqaehgpg.ap-northeast-1.elasticbeanstalk.com'
# SERVER_HOST = 'wwww.edatapai.com'

# # SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = [SERVER_HOST, '127.0.0.1', '*']

# DEBUG = False
# ALLOWED_HOSTS = [SERVER_HOST, '127.0.0.1', '*']


# Application definition

INSTALLED_APPS = [

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'predictapp',

    # allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # graphos plot
    'graphos',

    # # Ggoogle Adsense
    # 'sekizai',
    # 'ads',

    # Add import and export to Admin panel
    'import_export',

    # Celery
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'templates', 'account', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.csrf',
                'django.template.context_processors.i18n',
                'sekizai.context_processors.sekizai',
            ],
        },
    },
]

WSGI_APPLICATION = 'web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('en', ('English')),
    ('zh-cn', ('中文简体')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' 'static/' subdirectories and in STATICFILES_DIRS.
# Example: '/home/media/media.lawrence.com/static/'
STATIC_ROOT = 'static'
# STATIC_ROOT = os.path.join(BASE_DIR, "static_files")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
# STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

# allauth settings
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1
LOGIN_REDIRECT_URL = 'home'


# stripe settings
STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY", "pk_live_QU1qSRwciY9TEcE9Gp98DPtW")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", "sk_live_ZBUeg81y2tTCt0uZTot2SXWN")
# STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY", "pk_test_FBdVMu9SqtfIjvS4cVYnISXY")
# STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", "sk_test_8mA1baNCjkae17YkMoRebHXu")
STRIPE_PRICE_CNY = 4999
STRIPE_PRICE_USD = 799

# alipay settings
ALIPAY_APP_ID_DEBUG = os.environ.get("ALIPAY_APP_ID_DEBUG", "2016091600528115")
ALIPAY_APP_ID = os.environ.get('ALIPAY_APP_ID', '2018101261665323')
ALIPAY_PRICE_CNY = 49.99 # 交易金额(单位: 元 保留俩位小数)
ALIPAY_PRICE_USD = 7.99

# market data - Tiingo
#shujupai
TIINGO_API_KEY = os.environ.get('TIINGO_API_KEY', '5e228536db181403bc58620c25418c815fa3ef79')

# Celery settings
CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'
CELERY_TIMEZONE = 'Europe/London' #UTC
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'amqp://' # 'db+sqlite:///results.sqlite'
CELERY_TASK_SERIALIZER = 'json'
CELERY_IGNORE_RESULT = False
# CELERY_BEAT_SCHEDULE = {
#     # Execute every 60 secs
#     'run-backtest-eod-shg': {
#         'task': 'backtest_eod_shg',
#         'schedule': 60.0,
#         'args': (),
#     },
#     # Executes every day
#     'run-backtest-eod-she': {
#         'task': 'predictapp.tasks.backtest_eod_she',
#         'schedule': crontab(hour=7, minute=30, day_of_week='1-5'),
#   },
# }
# Can also be set via argument: celery -A web beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_MAX_LOOP_INTERVAL = 60 # The maximum number of seconds beat can sleep between checking the schedule is 600s

# # Celery settings - AWS SQS - https://sqs.ap-northeast-1.amazonaws.com/851024113686/edatapai
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', 'AKIAIQVIK3T4EEMJLN2Q')
# AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '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')
# CELERY_BROKER_TRANSPORT = 'sqs'
# CELERY_BROKER_URL = 'sqs://' # 'sqs://%s:%s@' % (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
# CELERY_BROKER_USER = AWS_ACCESS_KEY_ID
# CELERY_BROKER_PASSWORD = AWS_SECRET_ACCESS_KEY
# CELERY_BROKER_TRANSPORT_OPTIONS = {'region': 'ap-northeast-1',
#                                    'visibility_timeout': 30,
#                                    'polling_interval': 60,
#                                    'queue_name_prefix': 'eshujupai_%s-' % {True: 'dev', False: 'prd'}[DEBUG],
#                                    # 'CELERYD_PREFETCH_MULTIPLIER': 0,
#                                   }
# # CELERY_WORKER_STATE_DB = '/var/run/celery/worker.db'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_BACKEND = 'amqp://'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_IGNORE_RESULT = False
# CELERY_TASK_TRACK_STARTED = True
# CELERY_TIMEZONE = 'Europe/London' # 'UTC'
# # CELERY_ENABLE_UTC = True
# # Can also be set via argument: celery -A web beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY_BEAT_MAX_LOOP_INTERVAL = 600 # The maximum number of seconds beat can sleep between checking the schedule is 600s

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': '/var/log/eshujupai-logs/django.log',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }